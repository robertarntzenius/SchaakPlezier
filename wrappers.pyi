from typing import ClassVar

class Board:
    def __init__(self, fen_string: str, log_file: str) -> None: ...
    def addPiece(self, color: Color, piecetype: Piecetype, square: Square) -> None: ...
    def clearBoard(self) -> None: ...
    def doMove(
        self, from_square: Square, target_square: Square, promotion_piece: Piecetype = ...
    ) -> None: ...
    def findPiece(self, square: Square) -> bool: ...
    def getBoardState(self) -> BoardState: ...
    def getGameResult(self, noLegalMoves: bool) -> GameResult: ...
    def getHistory(self) -> list[Move]: ...
    def getPiece(self, square: Square) -> tuple: ...
    def getPieceMap(self, arg0: Color) -> dict: ...
    def getPossibleMoves(self) -> list[Move]: ...
    def inCheck(self) -> bool: ...
    def initFromFEN(self, fen_string: str) -> None: ...
    def removePiece(self, color: Color, piecetype: Piecetype, square: Square) -> None: ...
    def undoMove(self) -> None: ...
    def validate(self) -> tuple[bool, list[str]]: ...

class BoardState:
    activePlayer: Color
    bKC: bool
    bQC: bool
    enPassantSquare: Square
    fullMoveNumber: int
    halfMoveClock: int
    hash: int
    wKC: bool
    wQC: bool
    def __init__(self, *args, **kwargs) -> None: ...

class Color:
    __members__: ClassVar[dict] = ...  # read-only
    Black: ClassVar[Color] = ...
    NoColor: ClassVar[Color] = ...
    NrColors: ClassVar[Color] = ...
    White: ClassVar[Color] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Direction:
    __members__: ClassVar[dict] = ...  # read-only
    East: ClassVar[Direction] = ...
    FirstDiagonal: ClassVar[Direction] = ...
    FirstOrthogonal: ClassVar[Direction] = ...
    LastDiagonal: ClassVar[Direction] = ...
    LastOrthogonal: ClassVar[Direction] = ...
    North: ClassVar[Direction] = ...
    NorthEast: ClassVar[Direction] = ...
    NorthWest: ClassVar[Direction] = ...
    NrDirections: ClassVar[Direction] = ...
    South: ClassVar[Direction] = ...
    SouthEast: ClassVar[Direction] = ...
    SouthWest: ClassVar[Direction] = ...
    West: ClassVar[Direction] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class File:
    __members__: ClassVar[dict] = ...  # read-only
    FileA: ClassVar[File] = ...
    FileB: ClassVar[File] = ...
    FileC: ClassVar[File] = ...
    FileD: ClassVar[File] = ...
    FileE: ClassVar[File] = ...
    FileF: ClassVar[File] = ...
    FileG: ClassVar[File] = ...
    FileH: ClassVar[File] = ...
    NrFiles: ClassVar[File] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class GameResult:
    __members__: ClassVar[dict] = ...  # read-only
    BLACK_WIN_BY_CHECKMATE: ClassVar[GameResult] = ...
    BLACK_WIN_BY_FORFEIT: ClassVar[GameResult] = ...
    BLACK_WIN_BY_TIME_OUT: ClassVar[GameResult] = ...
    DRAW_BY_50_MOVES: ClassVar[GameResult] = ...
    DRAW_BY_INSUFFICIENT_MATERIAL: ClassVar[GameResult] = ...
    DRAW_BY_REPETITION: ClassVar[GameResult] = ...
    DRAW_BY_STALEMATE: ClassVar[GameResult] = ...
    NOT_OVER: ClassVar[GameResult] = ...
    WHITE_WIN_BY_CHECKMATE: ClassVar[GameResult] = ...
    WHITE_WIN_BY_FORFEIT: ClassVar[GameResult] = ...
    WHITE_WIN_BY_TIME_OUT: ClassVar[GameResult] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Move:
    capturePiece: Piecetype
    captureSquare: Square
    fromSquare: Square
    isCapture: bool
    isCastling: bool
    isPromotion: bool
    newEnPassant: Square
    playerPiece: Piecetype
    promotionPiece: Piecetype
    targetSquare: Square
    def __init__(self, *args, **kwargs) -> None: ...

class Piecetype:
    __members__: ClassVar[dict] = ...  # read-only
    Bishop: ClassVar[Piecetype] = ...
    King: ClassVar[Piecetype] = ...
    Knight: ClassVar[Piecetype] = ...
    NoType: ClassVar[Piecetype] = ...
    NrPiecetypes: ClassVar[Piecetype] = ...
    NrPromotiontypes: ClassVar[Piecetype] = ...
    Pawn: ClassVar[Piecetype] = ...
    Queen: ClassVar[Piecetype] = ...
    Rook: ClassVar[Piecetype] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Player:
    def __init__(self, *args, **kwargs) -> None: ...
    def decideOnMove(self, arg0: Board, arg1: list[Move]) -> Move: ...
    def getPlayerType(self) -> PlayerType: ...

class PlayerType:
    __members__: ClassVar[dict] = ...  # read-only
    AlphaBeta: ClassVar[PlayerType] = ...
    Human: ClassVar[PlayerType] = ...
    MinMax: ClassVar[PlayerType] = ...
    MonteCarlo: ClassVar[PlayerType] = ...
    Random: ClassVar[PlayerType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Rank:
    __members__: ClassVar[dict] = ...  # read-only
    NrRanks: ClassVar[Rank] = ...
    Rank1: ClassVar[Rank] = ...
    Rank2: ClassVar[Rank] = ...
    Rank3: ClassVar[Rank] = ...
    Rank4: ClassVar[Rank] = ...
    Rank5: ClassVar[Rank] = ...
    Rank6: ClassVar[Rank] = ...
    Rank7: ClassVar[Rank] = ...
    Rank8: ClassVar[Rank] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Square:
    __members__: ClassVar[dict] = ...  # read-only
    NoSquare: ClassVar[Square] = ...
    NrSquares: ClassVar[Square] = ...
    __entries: ClassVar[dict] = ...
    a1: ClassVar[Square] = ...
    a2: ClassVar[Square] = ...
    a3: ClassVar[Square] = ...
    a4: ClassVar[Square] = ...
    a5: ClassVar[Square] = ...
    a6: ClassVar[Square] = ...
    a7: ClassVar[Square] = ...
    a8: ClassVar[Square] = ...
    b1: ClassVar[Square] = ...
    b2: ClassVar[Square] = ...
    b3: ClassVar[Square] = ...
    b4: ClassVar[Square] = ...
    b5: ClassVar[Square] = ...
    b6: ClassVar[Square] = ...
    b7: ClassVar[Square] = ...
    b8: ClassVar[Square] = ...
    c1: ClassVar[Square] = ...
    c2: ClassVar[Square] = ...
    c3: ClassVar[Square] = ...
    c4: ClassVar[Square] = ...
    c5: ClassVar[Square] = ...
    c6: ClassVar[Square] = ...
    c7: ClassVar[Square] = ...
    c8: ClassVar[Square] = ...
    d1: ClassVar[Square] = ...
    d2: ClassVar[Square] = ...
    d3: ClassVar[Square] = ...
    d4: ClassVar[Square] = ...
    d5: ClassVar[Square] = ...
    d6: ClassVar[Square] = ...
    d7: ClassVar[Square] = ...
    d8: ClassVar[Square] = ...
    e1: ClassVar[Square] = ...
    e2: ClassVar[Square] = ...
    e3: ClassVar[Square] = ...
    e4: ClassVar[Square] = ...
    e5: ClassVar[Square] = ...
    e6: ClassVar[Square] = ...
    e7: ClassVar[Square] = ...
    e8: ClassVar[Square] = ...
    f1: ClassVar[Square] = ...
    f2: ClassVar[Square] = ...
    f3: ClassVar[Square] = ...
    f4: ClassVar[Square] = ...
    f5: ClassVar[Square] = ...
    f6: ClassVar[Square] = ...
    f7: ClassVar[Square] = ...
    f8: ClassVar[Square] = ...
    g1: ClassVar[Square] = ...
    g2: ClassVar[Square] = ...
    g3: ClassVar[Square] = ...
    g4: ClassVar[Square] = ...
    g5: ClassVar[Square] = ...
    g6: ClassVar[Square] = ...
    g7: ClassVar[Square] = ...
    g8: ClassVar[Square] = ...
    h1: ClassVar[Square] = ...
    h2: ClassVar[Square] = ...
    h3: ClassVar[Square] = ...
    h4: ClassVar[Square] = ...
    h5: ClassVar[Square] = ...
    h6: ClassVar[Square] = ...
    h7: ClassVar[Square] = ...
    h8: ClassVar[Square] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def makePlayer(arg0: str) -> Player: ...
